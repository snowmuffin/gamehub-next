/**
 * ÌôòÍ≤ΩÎ≥ÄÏàò Í∏∞Î∞ò URL ÏÑ§Ï†ï Ïú†Ìã∏Î¶¨Ìã∞
 */

// ÌîÑÎ°†Ìä∏ÏóîÎìú URL Í∞ÄÏ†∏Ïò§Í∏∞
export const getFrontendUrl = (): string => {
  return process.env.NEXT_PUBLIC_FRONTEND_URL || 'http://localhost:3000';
};

// API URL Í∞ÄÏ†∏Ïò§Í∏∞
export const getApiUrl = (): string => {
  return process.env.NEXT_PUBLIC_API_URL || '';
};

// Steam Ïù∏Ï¶ù URL Í∞ÄÏ†∏Ïò§Í∏∞
export const getSteamAuthUrl = (): string => {
  return process.env.NEXT_PUBLIC_STEAM_AUTH_URL || `${getApiUrl()}/auth/steam`;
};

// ÎèÑÎ©îÏù∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
export const getFrontendDomain = (): string => {
  return process.env.NEXT_PUBLIC_FRONTEND_DOMAIN || 'localhost:3000';
};

export const getApiDomain = (): string => {
  return process.env.NEXT_PUBLIC_API_DOMAIN || '';
};

// ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï ÌôïÏù∏
export const isDevelopment = (): boolean => {
  return process.env.NODE_ENV === 'development';
};

export const isProduction = (): boolean => {
  return process.env.NODE_ENV === 'production';
};

// URL ÏÉùÏÑ± Ìó¨Ìçº
export const createUrl = (path: string, baseUrl?: string): string => {
  const base = baseUrl || getFrontendUrl();
  return `${base}${path.startsWith('/') ? path : `/${path}`}`;
};

export const createApiUrl = (path: string): string => {
  const base = getApiUrl();
  return `${base}${path.startsWith('/') ? path : `/${path}`}`;
};

// ÌôòÍ≤ΩÎ≥ÄÏàò ÏÉÅÌÉú Î°úÍπÖ (Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎßå)
export const logEnvironmentInfo = (): void => {
  if (isDevelopment() && typeof window !== 'undefined') {
    console.log('üåç Environment Configuration:', {
      NODE_ENV: process.env.NODE_ENV,
      FRONTEND_URL: getFrontendUrl(),
      FRONTEND_DOMAIN: getFrontendDomain(),
      API_URL: getApiUrl(),
      API_DOMAIN: getApiDomain(),
      STEAM_AUTH_URL: getSteamAuthUrl(),
      IS_DEVELOPMENT: isDevelopment(),
      IS_PRODUCTION: isProduction(),
    });
  }
};
